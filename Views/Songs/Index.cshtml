@model PagedList.IPagedList<StronaMuzy.Models.Song>
@using PagedList.Mvc;

<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />
@{
    ViewBag.Title = "Index";
}



    <p>
        <h3>
            <span class="label glyphicon-bishop">   
             @Html.ActionLink("Add new Song", "Create")
            </span>
        </h3>
</p>
@using (Html.BeginForm())
{
    <p>
        Find by tittle or author: @Html.TextBox("searchBox", ViewBag.Filter as string)
        <input type="submit" value="Search" />
    </p>
}


<table class="table">
    <tr>
        <th>
            @Html.ActionLink("Tittle", "Index", new { sort = ViewBag.TittleSort, filter = ViewBag.Filter })
        </th>
        <th>
            @Html.ActionLink("Author", "Index", new { sort = ViewBag.AuthorSort, filter = ViewBag.Filter })
        </th>
        <th>
            Link
        </th>
@if (User.Identity.IsAuthenticated)
{
    if (User.IsInRole("Admin"))
    {
        <th>
            @Html.ActionLink("Date", "Index", new { sort = ViewBag.DateSort, filter = ViewBag.Filter })
        </th>
    }
}
        <th>
            @Html.ActionLink("Album", "Index", new { sort = ViewBag.AlbumSort, filter = ViewBag.Filter })
        </th>
        <th>
            @Html.ActionLink("Likes", "Index", new { sort = ViewBag.LikesSort, filter = ViewBag.Filter })
        </th>
        <th></th>
    </tr>



    @foreach (var item in Model)
    {
        <tr>
            <td>
                
                    @Html.DisplayFor(modelItem => item.Tittle)
                
            </td>

            <td>
               
                    @Html.DisplayFor(modelItem => item.Author)
               
            </td>
            <td style="table-layout:fixed;">
                <div style="overflow:hidden; word-wrap:break-word; width:200px; height:50px">
                    <span style="width:100px; word-wrap:break-word; display:inline-table">
                        <a href='@item.Link' target="_blank">@item.Link </a>
                    </span>
                </div>
            </td>
@if (User.Identity.IsAuthenticated)
{
    if (User.IsInRole("Admin"))
    {
            <td>
                @Html.DisplayFor(modelItem => item.Date)
            </td>
    }
}
            <td>
                <div style="overflow:hidden">
                    @Html.DisplayFor(modelItem => item.Album.Tittle)
                </div>
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Scores.Count)
            </td>
            <td>

                @*@Html.DropDownListFor(model => , Enumerable.Range(1, 10).Select(i => new SelectListItem { Text = i.ToString(), Value = i.ToString() })) |*@

                @Html.ActionLink("Like", "Like", new { id = item.id }) |
                @Html.ActionLink("Unlike", "Unlike", new { id = item.id }) 
                <br />
                @if (User.Identity.IsAuthenticated)
                {
                @Html.ActionLink("Comments", "GetPosts", new { id = item.id }) 
                } |
                @if (User.Identity.IsAuthenticated)
                {

              

                    <a href="@Url.Action("AddSongToList", new { id = item.id })" data-toggle="modal" data-target="#myModal">
                        Add to Your storage
                    </a>

              
                    <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">

                    </div>
                }

            </td>
            @if (User.Identity.IsAuthenticated)
            {
                if (User.IsInRole("Admin"))
                {
                    <td>

                        @Html.ActionLink("Edit", "Edit", new { id = item.id}) |
                        
                        @Html.ActionLink("Delete", "Delete", new { id = item.id })

                    </td>}
            }
        </tr>


    }
</table>

Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Index",
    new { page, sort = ViewBag.CurrentSort, filter = ViewBag.Filter }))


